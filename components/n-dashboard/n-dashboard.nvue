<template>
  <view class="sitir-basic-app-dashboard sbad" ref="box" :style="{
    height: wrapperHeight
  }">
    <status-bar></status-bar>
    <view class="sbad-top">
      <view class="sbad-logo">
        <u-image class="sbad-image" src="@/static/sitir_logo.jpg" mode="aspectFit"></u-image>
        <text class="sbad-title font-size-base">四特酒聚合平台客户端</text>
      </view>
      <view class="sbad-topright">
        <view class="sbad-avatar"><u-avatar text="特" randomBgColor></u-avatar></view>
        <view class="sbad-org" @click="handleSelectOrgDialog(true)">
          <text class="sbad-org-title font-size-base">
            {{selectOrg.orgName || this.orgs[0].orgName || '选择组织' }}
          </text>
          <u-icon name="arrow-down"></u-icon>
        </view>

      </view>
    </view>
    <u-divider></u-divider>
    <view class="sbad-body">
      <view class="sbad-aside">
        <block v-for="(tab) in asideTabs" :key="tab.name">
          <view class="sbad-aside-item">
            <u-icon :name="tab.name" :color="tab.color" :size="tab.size" @click="toggleAsideTab(tab)"
              :bold="true"></u-icon>
          </view>
        </block>

      </view>
      <view class="sbad-divider"></view>
      <view class="sbad-main">
        <!--
          此处遍历所有打开的web-view
          当点击某个web-view时，将其加入到打开的数组中
          当前web-view对象，设置为活跃对象，同时将其flex设为1
          非活跃对象，将其flex设为0，不占据任何空间
         -->
        <template v-for="webView in webViews">
          <st-web-view :key="webView.url"
            :class="['sbad-web-view', activeWebView.id === webView.id ? 'sbad-web-view-active' : '']"
            :web-url="webView.url"></st-web-view>
        </template>

        <!-- 覆盖在web-view上的设置 -->
        <cover-view class="sbad-pop-setting" v-if="activeTab.openSetting">
          <n-setting :title="activeTab.title" @close='handleCloseSetting'>
            <component :apps="webViews" :is="activeTab.component" @setActiveWebview="setActiveWebview">
              <component :is="innerCompInSys.component" @editTitle="editSysTitle"></component>
            </component>
          </n-setting>
        </cover-view>
        <!-- 展示应用 -->

      </view>
    </view>
    <u-popup :safeAreaInsetTop="true" class="sbad-popup" :show="show" mode="right"
      @close="handleSelectOrgDialog(false)">
      <!-- <status-bar></status-bar> -->
      <scroll-view scroll-y="true">
        <view class="sbad-popup-scroll">
          <xtx-treeNode :list="orgs" @change="change"></xtx-treeNode>
        </view>

      </scroll-view>

    </u-popup>
  </view>
</template>

<script>
  import NSysSettingSesc from '@/components/n-dashboard/n-sys-setting-desc.nvue'
  import NEditPwd from '@/components/n-dashboard/n-edit-pwd.nvue'
  import NShoWebviews from '@/components/n-dashboard/n-show-webviews.nvue'
  import NAppNav from '@/components/n-dashboard/n-app-nav.nvue'
  import NSysSetting from '@/components/n-dashboard/n-sys-setting.nvue'
  import NSetting from '@/components/n-dashboard/n-setting.nvue'
  import StatusBar from '@/uni_modules/uni-nav-bar/components/uni-nav-bar/uni-status-bar.vue'
  import XtxTreeNode from '@/components/xtx-treeNode/xtx-treeNode.vue'
  import StWebView from '@/components/st-web-nview.vue'

  import orgsData from './orgs.js'

  // #ifdef APP-NVUE
  const dom = weex.requireModule("dom");
  console.log(dom, 'dom')
  // #endif
  export default {
    components: {
      NEditPwd,
      NSysSettingSesc,
      NShoWebviews,
      NAppNav,
      NSysSetting,
      NSetting,
      StWebView,
      StatusBar,
      XtxTreeNode
    },
    mounted() {
      this.orgs = orgsData
      this.dealObjectValue(this.orgs)
      console.log(this.orgs, 1)
      console.log('on ready')
      setTimeout(() => {
        dom.getComponentRect("viewport", (option) => {
          console.log('view port', option)
          this.wrapperHeight = option.size.height
        })
        const result = dom.getComponentRect(this.$refs.box, (option) => {
          console.log("getComponentRect:", option);
          this.size = option.size;
        });
        console.log("return value:", result);
        console.log("viewport:", dom.getComponentRect("viewport"));
      }, 100);
    },
    data() {
      return {
        activeWebView: {
          id: 0,
          url: 'https://www.cnblogs.com/heisetianshi/p/15573264.html'
        },
        webViews: [{
          id: 0,
          url: 'https://www.cnblogs.com/heisetianshi/p/15573264.html'
        }],
        innerCompInSys: {
          component: 'NSysSettingSesc',
          title: ''
        },
        compInSys: [{
            name: 'setting',
            title: '设置/修改密码',
            label: 'setting',
            component: 'NEditPwd',
            color: '#000',
            size: 28,
          },
          {
            name: 'setting',
            title: '设置',
            label: 'setting',
            component: 'NSysSettingSesc',
            color: '#000',
            size: 28,
          },
        ],
        activeTab: {
          component: '',
          openSetting: false,
        },

        asideTabs: [{
            name: 'list-dot',
            title: '选择应用',
            label: 'apps',
            component: 'NAppNav',
            color: '#000',
            size: 28,
          },
          {
            name: 'pushpin',
            title: '打开的应用',
            label: 'open-apps',
            component: 'NShoWebviews',
            color: '#000',
            size: 28,
          },
          {
            name: 'setting',
            title: '设置',
            label: 'setting',
            component: 'NSysSetting',
            color: '#000',
            size: 28,
          },
        ],
        show: false,
        selectOrg: {},
        orgs: [],
        wrapperHeight: null,
        size: {}
      }
    },
    onReady() {

    },
    methods: {
      removeAsidetabColor() {
        this.asideTabs.forEach(item => {
          item.color = '#000'
        })
      },
      setActiveWebview(data) {
        console.log(data, '设置活跃webview')
        this.webViews.push(data)
        this.activeWebView = Object.assign({}, this.activeWebView, data)
        this.$set(this.activeTab, 'openSetting', false)
        this.removeAsidetabColor()
      },
      editSysTitle(component) {
        console.log(component, 'component')
        let curComp = this.compInSys.find(item => item.component === component)
        if (!curComp) {
          return false
        }
        this.$set(this.activeTab, 'title', curComp.title)
        this.innerCompInSys = Object.assign({}, this.innerCompInSys, curComp)
      },
      handleCloseSetting() {
        console.log('获取')
        this.$set(this.activeTab, 'openSetting', false)
        this.removeAsidetabColor()
      },
      getSysInfo() {
        console.log('this ')
        let that = this;
        uni.getSystemInfo({
          success: function(res) {
            console.log(1, res, 'res')

            uni.createSelectorQuery().in(that).select('.sbad').boundingClientRect()
              .exec(
                data => {
                  console.log(11111, 2222)
                  console.log(res, data, 'res data')
                  that.wrapperHeight = res.windowHeight
                })
          },
          fail: function(err) {
            console.log(err, 'err')
          }

        });
      },

      toggleAsideTab(tab) {
        this.activeTab = Object.assign({}, this.activeTab, tab)
        this.$set(this.activeTab, 'openSetting', true)
        this.innerCompInSys = Object.assign({}, this.innerCompInSys, {
          component: 'NSysSettingSesc',
          title: ''
        })
        this.asideTabs.forEach(item => {
          if (item.label === tab.label) {
            item.color = '#006aff'
          } else {
            item.color = '#000'
          }
        })
      },
      change(org) {
        console.log(org, 'org')
        this.handleSelectOrgDialog(false)
        this.selectOrg = org
      },
      dealObjectValue(data) {
        data.forEach(item => {
          item.isOpen = true
          if (item.children)
            this.dealObjectValue(item.children)
        })
      },
      handleSelectOrgDialog(flag) {
        this.show = flag
        // console.log('close');
      }
    }
  }
</script>

<style scoped lang="scss">
  @import '@/static/variable.scss';

  $widthOrHeight: 36rpx;

  .sbad {
    display: flex;
    flex-flow: column nowrap;



    // 顶部样式
    &-top {
      width: 750rpx;
      height: $widthOrHeight;
      padding-right: 12rpx;
      display: flex;
      flex-flow: nowrap row;
    }

    &-logo {
      display: flex;
      flex-flow: row nowrap;
      align-items: center;
    }

    &-image {
      height: $widthOrHeight;
      width: $widthOrHeight;
    }

    &-title {
      font-size: $basic-size;
      padding-left: 6rpx;
      color: #000;
      // font-size: 2;
    }

    &-topright {
      display: flex;
      flex-flow: row nowrap;
      justify-content: flex-end;
      align-items: center;
      flex: 1;
    }

    &-avatar {}

    &-org {
      display: flex;
      flex-flow: row nowrap;
      align-items: center;

      &-title {
        font-size: $basic-size;
        padding: 0 3rpx 0 6rpx;
      }
    }


    // 主体样式
    &-body {
      flex: 1;
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
    }

    // 主体-侧边栏样式
    &-aside {
      width: $widthOrHeight !important;
      display: flex;
      flex-flow: column;
      align-items: center;

      &-item {
        margin-top: 12px;
      }
    }

    // 主体-主体样式
    &-main {
      flex: 1;
      display: flex;
      position: relative;
    }

    &-web-view {
      flex: 0;
      display: flex;
      color: red;

      &-inner {
        flex: 0;
        z-index: -10000;
      }

      &-active {
        flex: 1;
      }
    }

    &-pop-setting {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      background-color: #fff;
      display: flex;
    }





    // 弹窗样式
    &-popup {
      flex: 0;

      &-scroll {
        display: flex;
        flex-flow: column nowrap;
      }
    }


    .u-divider {
      margin: 0;
    }

    &-divider {
      width: 1rpx;
      background-color: #dcdfe6;

    }
  }
</style>